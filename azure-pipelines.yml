# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
  - main
pool:
  vmImage: ubuntu-latest
steps:
  - script: 'echo Hello, world!'
    displayName: Run a one-line script
  - script: |
      echo Add other tasks to build, test, and deploy your project.
      echo See https://aka.ms/yaml
    displayName: Run a multi-line script
  - task: UseDotNet@2
    inputs:
      version: 6.x
  - task: UseDotNet@2
    displayName: Install .NET Core SDK
    inputs:
      version: 6.x
      performMultiLevelLookup: true
      includePreviewVersions: true
  - task: DotNetCoreCLI@2
    displayName: Restore
    inputs:
      command: restore
      projects: '**/*.csproj'
      feedsToUse: config
      nugetConfigPath: NuGet.config
      externalFeedCredentials: <Name of the NuGet service connection>
  - task: DotNetCoreCLI@2
    displayName: Build
    inputs:
      command: build
      projects: '**/*.csproj'
      arguments: '--configuration $(buildConfiguration)'
  - task: DotNetCoreCLI@2
    displayName: Install dotnetsay
    inputs:
      command: custom
      custom: tool
      arguments: install -g dotnetsay
  - task: DotNetCoreCLI@2
    inputs:
      command: test
      projects: '**/*Tests/*.csproj'
      arguments: '--configuration $(buildConfiguration)'
  - script: dotnet test <test-project> --logger trx
  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
      testRunner: VSTest
      testResultsFiles: '**/*.trx'
  - task: DotNetCoreCLI@2
    inputs:
      command: test
      projects: '**/*Tests/*.csproj'
      arguments: '--configuration $(buildConfiguration) --collect "Code coverage"'
  - script: dotnet test <test-project> --logger trx --collect "Code coverage"
  - task: PublishTestResults@2
    inputs:
      testRunner: VSTest
      testResultsFiles: '**/*.trx'
  - task: DotNetCoreCLI@2
    displayName: dotnet test
    inputs:
      command: test
      arguments: >-
        --configuration $(buildConfiguration) --collect:"XPlat Code Coverage" --
        DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura
      publishTestResults: true
      projects: '**/test-library/*.csproj'
  - task: PublishCodeCoverageResults@1
    displayName: Publish code coverage report
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: $(Agent.TempDirectory)/**/coverage.cobertura.xml
  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: $(Build.ArtifactStagingDirectory)
      artifactName: myWebsiteName
  - task: DotNetCoreCLI@2
    inputs:
      command: publish
      publishWebProjects: true
      arguments: >-
        --configuration $(BuildConfiguration) --output
        $(Build.ArtifactStagingDirectory)
      zipAfterPublish: true
